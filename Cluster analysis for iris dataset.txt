pwd
cd C:\123Local Disk D\intern

#importing required libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
import math as ma
warnings.filterwarnings("ignore")


#importing dataset
data=pd.read_csv("Iris1.csv")
print(len(data))
data.head(10)


#Checking for null values if any
data.isna()

#Summary of Statistical value
data.describe()

data["Species"].value_counts()

#Data Visualization
data.plot(kind="scatter", x="SepalLengthCm", y="SepalWidthCm")

sns.heatmap(data.corr(),annot=True,cmap="Spectral")
plt.show()

sns.FacetGrid(data, hue="Species", size=5)\
   .map(plt.scatter,"SepalLengthCm","SepalWidthCm")\
   .add_legend()


sns.FacetGrid(data, hue="Species", size=5)\
   .map(plt.scatter,"PetalLengthCm","PetalWidthCm")\
   .add_legend()

# Elbow method to find optimum number of clusters
x=data.iloc[:,[0,1,2,3]].values

from sklearn.cluster import KMeans
wcss= []

for i in range(1,11):
    kmeans = KMeans(n_clusters = i, init = "k-means++",
                   max_iter = 300, n_init = 10, random_state=0)
    kmeans.fit(x)
    wcss.append(kmeans.inertia_)

    
#Plotting The result on a line graph
# and allowing us to observe "The elbow"
plt.plot(range(1,11), wcss)
plt.title("The elbow method")
plt.xlabel("Number of cluster")
plt.ylabel("WCSS") #Within cluster sum of square
plt.show()



#Clustering the datapoints using Kmeans Unsupervised ML algorithm
kmeans = KMeans(n_clusters = 3, init="k-means++",
               max_iter = 300, n_init = 10, random_state=0)
y_kmeans = kmeans.fit_predict(x)



#Visualizing the clusters
plt.scatter(x[y_kmeans == 0, 0], x[y_kmeans ==0, 1],
           s=100, c="blue", label= "iris-setosa")
plt.scatter(x[y_kmeans == 1, 0], x[y_kmeans ==1, 1],
           s=100, c="yellow", label= "iris-versicolour")
plt.scatter(x[y_kmeans == 2, 0], x[y_kmeans ==2, 1],
           s=100, c="red", label= "iris-virginica")

#Plotting the centroids of the clusters
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1],
           s=100, c="green", label= "Centroids")
plt.legend()
























































